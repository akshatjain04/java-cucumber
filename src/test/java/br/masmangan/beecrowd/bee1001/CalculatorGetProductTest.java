/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example 
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b

Scenario 1: Test for Positive Numbers
Details:
  TestName: testProductOfPositiveNumbers
  Description: This test is meant to check the product of two positive numbers. 
Execution:
  Arrange: Set two positive integers using setA and setB methods. 
  Act: Invoke the getProduct method.
  Assert: Assert that the product of the two numbers is correct.
Validation:
  This assertion verifies that the product of two positive numbers is calculated correctly. This is significant as it confirms the basic arithmetic operation of the application.

Scenario 2: Test for Negative Numbers
Details:
  TestName: testProductOfNegativeNumbers
  Description: This test is meant to check the product of two negative numbers.
Execution:
  Arrange: Set two negative integers using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Assert that the product of the two numbers is a positive number.
Validation:
  This assertion verifies that the product of two negative numbers is a positive number. This is significant as it confirms the mathematical rule of multiplication.

Scenario 3: Test for Zero
Details:
  TestName: testProductWithZero
  Description: This test is meant to check the product of a number and zero.
Execution:
  Arrange: Set one integer to zero and another to any integer using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Assert that the product is zero.
Validation:
  This assertion verifies that the product of any number and zero is zero. This is significant as it confirms the mathematical rule of multiplication.

Scenario 4: Test for Larger Numbers
Details:
  TestName: testProductOfLargeNumbers
  Description: This test is meant to check the product of two large numbers.
Execution:
  Arrange: Set two large integers using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Assert that the product of the two numbers is correct.
Validation:
  This assertion verifies that the product of two large numbers is calculated correctly. This is significant as it confirms the method's ability to handle and calculate large numbers.

Scenario 5: Test for One Positive and One Negative Number
Details:
  TestName: testProductOfPositiveAndNegativeNumber
  Description: This test is meant to check the product of one positive and one negative number.
Execution:
  Arrange: Set one positive and one negative integer using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Assert that the product of the two numbers is a negative number.
Validation:
  This assertion verifies that the product of one positive and one negative number is a negative number. This is significant as it confirms the mathematical rule of multiplication.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class CalculatorGetProductTest {
    @Test
    @Tag("valid")
    public void testProductOfPositiveNumbers() {
        Calculator calculator = new Calculator();
        calculator.setA(5);
        calculator.setB(10);
        int result = calculator.getProduct();
        assertEquals(50, result);
    }
    @Test
    @Tag("valid")
    public void testProductOfNegativeNumbers() {
        Calculator calculator = new Calculator();
        calculator.setA(-5);
        calculator.setB(-10);
        int result = calculator.getProduct();
        assertEquals(50, result);
    }
    @Test
    @Tag("valid")
    public void testProductWithZero() {
        Calculator calculator = new Calculator();
        calculator.setA(0);
        calculator.setB(10);
        int result = calculator.getProduct();
        assertEquals(0, result);
    }
    @Test
    @Tag("valid")
    public void testProductOfLargeNumbers() {
        Calculator calculator = new Calculator();
        calculator.setA(10000);
        calculator.setB(10000);
        int result = calculator.getProduct();
        assertEquals(100000000, result);
    }
    @Test
    @Tag("valid")
    public void testProductOfPositiveAndNegativeNumber() {
        Calculator calculator = new Calculator();
        calculator.setA(-5);
        calculator.setB(10);
        int result = calculator.getProduct();
        assertEquals(-50, result);
    }
}