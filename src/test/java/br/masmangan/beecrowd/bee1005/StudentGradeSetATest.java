// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=setA_a669585e3b
ROOST_METHOD_SIG_HASH=setA_4612eff528

"""
Scenario 1: Validate Correct Assignment of 'a' Grade

Details:
  TestName: testCorrectAssignmentOfAGrade
  Description: This test is meant to check if the method setA correctly assigns the provided grade to the 'a' field in the StudentGrade entity.
Execution:
  Arrange: Instantiate a StudentGrade object. Define a double variable 'aGrade' and assign it a value.
  Act: Invoke the setA method on the StudentGrade object with 'aGrade' as the parameter.
  Assert: Use JUnit assertions to compare the actual result of getAverage method against the expected outcome.
Validation:
  The assertion aims to verify that the 'a' field in the StudentGrade entity is correctly assigned the value passed to the setA method. The expected result is the calculated average based on the assigned 'a' grade and a pre-defined 'b' grade. The significance of this test lies in ensuring accurate grade assignment and proper functioning of the grading system.

Scenario 2: Validate Negative Grade Assignment

Details:
  TestName: testNegativeGradeAssignment
  Description: This test is meant to check how the method setA handles a negative grade, which is an invalid input.
Execution:
  Arrange: Instantiate a StudentGrade object. Define a double variable 'aGrade' and assign it a negative value.
  Act: Invoke the setA method on the StudentGrade object with 'aGrade' as the parameter.
  Assert: Use JUnit assertions to check if an exception is thrown.
Validation:
  The assertion aims to verify that the setA method throws an exception when provided with a negative grade. The expected result is an exception, as grades cannot be negative. The significance of this test lies in ensuring proper error handling and data validation.

Scenario 3: Validate Grade Assignment with Maximum Double Value

Details:
  TestName: testMaxDoubleGradeAssignment
  Description: This test is meant to check how the method setA handles the maximum double value, which might lead to overflow in subsequent calculations.
Execution:
  Arrange: Instantiate a StudentGrade object. Define a double variable 'aGrade' and assign it the maximum double value.
  Act: Invoke the setA method on the StudentGrade object with 'aGrade' as the parameter.
  Assert: Use JUnit assertions to check if an exception is thrown or if the getAverage method returns Infinity.
Validation:
  The assertion aims to verify that the setA method can handle extreme grade values without causing overflow in subsequent calculations. The expected result is either an exception or an average of Infinity. The significance of this test lies in ensuring robustness against extreme inputs.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class StudentGradeSetATest {

	@Tag("valid")
	@Test
	public void testCorrectAssignmentOfAGrade() {
		StudentGrade studentGrade = new StudentGrade();
		double aGrade = 90.0;
		double bGrade = 80.0;
		studentGrade.setA(aGrade);
		studentGrade.setB(bGrade);
		double expected = (aGrade * 3.5 + bGrade * 7.5) / 11.0;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual);
	}

	@Tag("invalid")
	@Test
	public void testNegativeGradeAssignment() {
		StudentGrade studentGrade = new StudentGrade();
		double aGrade = -90.0;
		assertThrows(IllegalArgumentException.class, () -> {
			studentGrade.setA(aGrade);
		});
	}

	@Tag("boundary")
	@Test
	public void testMaxDoubleGradeAssignment() {
		StudentGrade studentGrade = new StudentGrade();
		double aGrade = Double.MAX_VALUE;
		studentGrade.setA(aGrade);
		assertTrue(Double.isInfinite(studentGrade.getAverage()));
	}

}