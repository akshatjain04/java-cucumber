// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=setB_3eb309de41
ROOST_METHOD_SIG_HASH=setB_d19f9d277f

Scenario 1: Valid value assignment to B
Details:
  TestName: setValidValueToB
  Description: This test is meant to check if the method setB(double b) is able to correctly assign a valid double value to the field 'b'.
Execution:
  Arrange: Create an instance of StudentGrade. Set a known value for 'a' using setA(double a) method.
  Act: Invoke setB(double b) method with a valid double value.
  Assert: Invoke getAverage() and compare the result with the expected average, calculated manually using the formula (a * 3.5 + b * 7.5) / 11.0.
Validation:
  The assertion aims to verify that the assigned value of 'b' is correctly used in the calculation of the average. The expected result is based on the formula provided for the average calculation. This test is significant to ensure that the setB method is working as expected and contributing to the correct average calculation.

Scenario 2: Negative value assignment to B
Details:
  TestName: setNegativeValueToB
  Description: This test is intended to check the behavior of setB(double b) method when a negative value is assigned to 'b'.
Execution:
  Arrange: Create an instance of StudentGrade. Set a known value for 'a' using setA(double a) method.
  Act: Invoke setB(double b) method with a negative double value.
  Assert: Invoke getAverage() and compare the result with the expected average, calculated manually using the formula (a * 3.5 + b * 7.5) / 11.0.
Validation:
  The assertion aims to verify that the negative value of 'b' is accurately used in the calculation of the average. The expected result is based on the provided formula for the average calculation. This test is important as it checks if the setB method can handle negative values appropriately.

Scenario 3: Zero value assignment to B
Details:
  TestName: setZeroValueToB
  Description: This test is to check the functionality of setB(double b) method when zero is assigned to 'b'.
Execution:
  Arrange: Create an instance of StudentGrade. Set a known value for 'a' using setA(double a) method.
  Act: Invoke setB(double b) method with zero.
  Assert: Invoke getAverage() and compare the result with the expected average, calculated manually using the formula (a * 3.5 + b * 7.5) / 11.0.
Validation:
  The assertion aims to verify that the zero value of 'b' is correctly used in the calculation of the average. The expected result is based on the provided formula for the average calculation. This test is significant as it checks if the setB method can handle zero values correctly and contribute to the correct average calculation.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeSetBTest {

	@Test
	@Tag("valid")
	public void setValidValueToB() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(1.0);
		double validValue = 2.0;
		// Act
		studentGrade.setB(validValue);
		// Assert
		double expectedAverage = (1.0 * 3.5 + validValue * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), "Average calculation is incorrect");
	}

	@Test
	@Tag("invalid")
	public void setNegativeValueToB() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(1.0);
		double negativeValue = -2.0;
		// Act
		studentGrade.setB(negativeValue);
		// Assert
		double expectedAverage = (1.0 * 3.5 + negativeValue * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), "Average calculation is incorrect");
	}

	@Test
	@Tag("boundary")
	public void setZeroValueToB() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(1.0);
		double zeroValue = 0.0;
		// Act
		studentGrade.setB(zeroValue);
		// Assert
		double expectedAverage = (1.0 * 3.5 + zeroValue * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), "Average calculation is incorrect");
	}

}