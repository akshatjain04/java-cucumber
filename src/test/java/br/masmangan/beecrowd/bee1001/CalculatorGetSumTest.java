// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=getSum_61f2af7779
ROOST_METHOD_SIG_HASH=getSum_d38a33793d

"""
Scenario 1: Validate getSum with positive numbers
Details:
  TestName: testGetSumWithPositiveNumbers
  Description: This test is meant to check the getSum method when both input numbers are positive.
Execution:
  Arrange: Set a and b to positive numbers using setA and setB methods.
  Act: Invoke the getSum method.
  Assert: Use JUnit assertions to compare the actual sum against the expected sum.
Validation:
  This assertion verifies that the sum of two positive numbers is calculated correctly. The expected result is the sum of the two numbers set. This test is significant as it validates the basic arithmetic operation.

Scenario 2: Validate getSum with negative numbers
Details:
  TestName: testGetSumWithNegativeNumbers
  Description: This test is meant to check the getSum method when both input numbers are negative.
Execution:
  Arrange: Set a and b to negative numbers using setA and setB methods.
  Act: Invoke the getSum method.
  Assert: Use JUnit assertions to compare the actual sum against the expected sum.
Validation:
  This assertion verifies that the sum of two negative numbers is calculated correctly. The expected result is the sum of the two numbers set. This test is significant as it validates the basic arithmetic operation with negative numbers.

Scenario 3: Validate getSum with zero
Details:
  TestName: testGetSumWithZero
  Description: This test is meant to check the getSum method when one of the input numbers is zero.
Execution:
  Arrange: Set a to any number and b to zero using setA and setB methods.
  Act: Invoke the getSum method.
  Assert: Use JUnit assertions to compare the actual sum against the expected sum.
Validation:
  This assertion verifies that the sum of a number and zero is calculated correctly. The expected result is the number set in a. This test is significant as it validates the basic arithmetic operation with zero.

Scenario 4: Validate getSum with large numbers
Details:
  TestName: testGetSumWithLargeNumbers
  Description: This test is meant to check the getSum method when both input numbers are large.
Execution:
  Arrange: Set a and b to large numbers using setA and setB methods.
  Act: Invoke the getSum method.
  Assert: Use JUnit assertions to compare the actual sum against the expected sum.
Validation:
  This assertion verifies that the sum of two large numbers is calculated correctly. The expected result is the sum of the two numbers set. This test is significant as it validates the basic arithmetic operation with large numbers.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class CalculatorGetSumTest {

	@Test
	@Tag("valid")
	void testGetSumWithPositiveNumbers() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(10);
		int expected = 15;
		int actual = calculator.getSum();
		assertEquals(expected, actual);
	}

	@Test
	@Tag("valid")
	void testGetSumWithNegativeNumbers() {
		Calculator calculator = new Calculator();
		calculator.setA(-5);
		calculator.setB(-10);
		int expected = -15;
		int actual = calculator.getSum();
		assertEquals(expected, actual);
	}

	@Test
	@Tag("valid")
	void testGetSumWithZero() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(0);
		int expected = 5;
		int actual = calculator.getSum();
		assertEquals(expected, actual);
	}

	@Test
	@Tag("boundary")
	void testGetSumWithLargeNumbers() {
		Calculator calculator = new Calculator();
		calculator.setA(1000000);
		calculator.setB(2000000);
		int expected = 3000000;
		int actual = calculator.getSum();
		assertEquals(expected, actual);
	}

}