

// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

Scenario 1: Testing getAverage with positive numbers
Details:
    TestName: testGetAverageWithPositiveNumbers
    Description: This test will check the functionality of the getAverage method when both 'a' and 'b' are positive.
Execution:
    Arrange: Set 'a' and 'b' to any positive numbers.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is the correct average according to the formula.
Validation:
    This test verifies that the getAverage method correctly calculates the average when both 'a' and 'b' are positive. It is crucial for the application's overall functioning as it ensures the correct calculation of the average grade.

Scenario 2: Testing getAverage with negative numbers
Details:
    TestName: testGetAverageWithNegativeNumbers
    Description: This test will check the functionality of the getAverage method when both 'a' and 'b' are negative.
Execution:
    Arrange: Set 'a' and 'b' to any negative numbers.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is the correct average according to the formula.
Validation:
    This test verifies that the getAverage method correctly calculates the average even when both 'a' and 'b' are negative. This is crucial for maintaining the integrity of the application's calculations.

Scenario 3: Testing getAverage with zero
Details:
    TestName: testGetAverageWithZero
    Description: This test will check the functionality of the getAverage method when either 'a' or 'b' or both are zero.
Execution:
    Arrange: Set 'a' and/or 'b' to zero.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is the correct average according to the formula.
Validation:
    This test verifies that the getAverage method can handle zero values correctly. This is important because zero is a valid grade and should not cause any errors in the calculations.

Scenario 4: Testing getAverage with extremely large numbers
Details:
    TestName: testGetAverageWithLargeNumbers
    Description: This test will check the functionality of the getAverage method when 'a' and 'b' are extremely large numbers.
Execution:
    Arrange: Set 'a' and 'b' to any extremely large numbers.
    Act: Invoke the getAverage method.
    Assert: Check if the returned value is the correct average according to the formula.
Validation:
    This test verifies that the getAverage method can handle large numbers without causing any overflow errors. This is important for maintaining the robustness of the application.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {
    @Test
    @Tag("valid")
    public void testGetAverageWithPositiveNumbers() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(80.5);
        studentGrade.setB(90.0);
        double expectedAverage = (80.5 * 3.5 + 90.0 * 7.5) / 11.0;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("valid")
    public void testGetAverageWithNegativeNumbers() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(-80.5);
        studentGrade.setB(-90.0);
        double expectedAverage = (-80.5 * 3.5 + -90.0 * 7.5) / 11.0;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testGetAverageWithZero() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(0);
        studentGrade.setB(0);
        double expectedAverage = (0 * 3.5 + 0 * 7.5) / 11.0;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testGetAverageWithLargeNumbers() {
        StudentGrade studentGrade = new StudentGrade();
        double largeNumber = Double.MAX_VALUE / 2;
        studentGrade.setA(largeNumber);
        studentGrade.setB(largeNumber);
        double expectedAverage = (largeNumber * 3.5 + largeNumber * 7.5) / 11.0;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
}