// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=setB_dd5b9e9525
ROOST_METHOD_SIG_HASH=setB_cba279c0b1

"""
Scenario 1: Validate setB method with positive integer
Details:
  TestName: validateSetBWithPositiveInteger
  Description: This test is meant to check if the setB method sets the value of b correctly when a positive integer is passed.
Execution:
  Arrange: Instantiate the Calculator class and set a value for a.
  Act: Invoke the setB method with a positive integer.
  Assert: Invoke the getSum and getProduct methods and use JUnit assertions to compare actual results against expected outcomes.
Validation:
  The assertion aims to verify that the setB method correctly sets the value of b when a positive integer is passed. This test is significant to ensure the calculator functions correctly when adding and multiplying positive integers.

Scenario 2: Validate setB method with negative integer
Details:
  TestName: validateSetBWithNegativeInteger
  Description: This test is meant to check if the setB method sets the value of b correctly when a negative integer is passed.
Execution:
  Arrange: Instantiate the Calculator class and set a value for a.
  Act: Invoke the setB method with a negative integer.
  Assert: Invoke the getSum and getProduct methods and use JUnit assertions to compare actual results against expected outcomes.
Validation:
  The assertion aims to verify that the setB method correctly sets the value of b when a negative integer is passed. This test is significant to ensure the calculator functions correctly when adding and multiplying with negative integers.

Scenario 3: Validate setB method with zero
Details:
  TestName: validateSetBWithZero
  Description: This test is meant to check if the setB method sets the value of b correctly when zero is passed.
Execution:
  Arrange: Instantiate the Calculator class and set a value for a.
  Act: Invoke the setB method with zero.
  Assert: Invoke the getSum and getProduct methods and use JUnit assertions to compare actual results against expected outcomes.
Validation:
  The assertion aims to verify that the setB method correctly sets the value of b when zero is passed. This test is significant to ensure the calculator functions correctly when adding and multiplying with zero.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class CalculatorSetBTest {

	@Test
	@Tag("valid")
	public void validateSetBWithPositiveInteger() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(3);
		assertEquals(8, calculator.getSum(), "Sum is incorrect");
		assertEquals(15, calculator.getProduct(), "Product is incorrect");
	}

	@Test
	@Tag("valid")
	public void validateSetBWithNegativeInteger() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(-3);
		assertEquals(2, calculator.getSum(), "Sum is incorrect");
		assertEquals(-15, calculator.getProduct(), "Product is incorrect");
	}

	@Test
	@Tag("boundary")
	public void validateSetBWithZero() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(0);
		assertEquals(5, calculator.getSum(), "Sum is incorrect");
		assertEquals(0, calculator.getProduct(), "Product is incorrect");
	}

}