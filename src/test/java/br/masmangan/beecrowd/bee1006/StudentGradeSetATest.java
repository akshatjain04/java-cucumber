// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=setA_a669585e3b
ROOST_METHOD_SIG_HASH=setA_4612eff528

"""
Scenario 1: Testing setA method with valid positive input
Details:
  TestName: testSetAWithPositiveInput
  Description: This test checks if the setA method correctly sets the value of 'a' when it is provided a valid positive input.
Execution:
  Arrange: Instantiate a StudentGrade object and a positive double value.
  Act: Invoke setA method with the positive double value.
  Assert: Check if the average calculated by getAverage method is as expected.
Validation:
  The assertion aims to verify that 'a' has been set correctly and the average is calculated accurately. It validates that the setA method works correctly with positive inputs.

Scenario 2: Testing setA method with zero
Details:
  TestName: testSetAWithZero
  Description: This test checks if the setA method correctly sets the value of 'a' when it is provided an input of zero.
Execution:
  Arrange: Instantiate a StudentGrade object and a zero double value.
  Act: Invoke setA method with the zero double value.
  Assert: Check if the average calculated by getAverage method is as expected.
Validation:
  The assertion aims to verify that 'a' has been set correctly and the average is calculated accurately. It validates that the setA method works correctly with a zero input.

Scenario 3: Testing setA method with negative input
Details:
  TestName: testSetAWithNegativeInput
  Description: This test checks if the setA method correctly sets the value of 'a' when it is provided a negative input.
Execution:
  Arrange: Instantiate a StudentGrade object and a negative double value.
  Act: Invoke setA method with the negative double value.
  Assert: Check if the average calculated by getAverage method is as expected.
Validation:
  The assertion aims to verify that 'a' has been set correctly and the average is calculated accurately. It validates that the setA method works correctly with negative inputs.

Scenario 4: Testing setA method with maximum possible double value
Details:
  TestName: testSetAWithMaxDouble
  Description: This test checks if the setA method correctly sets the value of 'a' when it is provided the maximum possible double value.
Execution:
  Arrange: Instantiate a StudentGrade object and the maximum possible double value.
  Act: Invoke setA method with the max double value.
  Assert: Check if the average calculated by getAverage method is as expected.
Validation:
  The assertion aims to verify that 'a' has been set correctly and the average is calculated accurately. It validates the boundary condition where the setA method is provided the maximum possible double value.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeSetATest {

	@Test
	@Tag("valid")
	public void testSetAWithPositiveInput() {
		StudentGrade studentGrade = new StudentGrade();
		double a = 5.0;
		double b = 0.0;
		double c = 0.0;
		studentGrade.setA(a);
		studentGrade.setB(b);
		studentGrade.setC(c);
		double expectedAverage = a * 2.0 / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("valid")
	public void testSetAWithZero() {
		StudentGrade studentGrade = new StudentGrade();
		double a = 0.0;
		double b = 0.0;
		double c = 0.0;
		studentGrade.setA(a);
		studentGrade.setB(b);
		studentGrade.setC(c);
		double expectedAverage = 0.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("valid")
	public void testSetAWithNegativeInput() {
		StudentGrade studentGrade = new StudentGrade();
		double a = -5.0;
		double b = 0.0;
		double c = 0.0;
		studentGrade.setA(a);
		studentGrade.setB(b);
		studentGrade.setC(c);
		double expectedAverage = a * 2.0 / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("boundary")
	public void testSetAWithMaxDouble() {
		StudentGrade studentGrade = new StudentGrade();
		double a = Double.MAX_VALUE;
		double b = 0.0;
		double c = 0.0;
		studentGrade.setA(a);
		studentGrade.setB(b);
		studentGrade.setC(c);
		double expectedAverage = a * 2.0 / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

}