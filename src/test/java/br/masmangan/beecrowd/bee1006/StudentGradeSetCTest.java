// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=setC_6b626570ad
ROOST_METHOD_SIG_HASH=setC_f40d5436c1

"""
Scenario 1: Testing the setC method with a positive number
Details:
  TestName: setCWithPositiveNumber
  Description: This test is meant to check the setC method when a positive number is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with a positive number.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is a positive number. The expected result is based on the formula provided in the getAverage method. This test is significant as it checks normal functionality of the setC method.

Scenario 2: Testing the setC method with a negative number
Details:
  TestName: setCWithNegativeNumber
  Description: This test is meant to check the setC method when a negative number is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with a negative number.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is a negative number. The expected result is based on the formula provided in the getAverage method. This test is significant as it checks the setC method's ability to handle negative numbers.

Scenario 3: Testing the setC method with zero
Details:
  TestName: setCWithZero
  Description: This test is meant to check the setC method when zero is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with zero.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is zero. The expected result is based on the formula provided in the getAverage method. This test is significant as it checks the setC method's ability to handle zero.

Scenario 4: Testing the setC method with a large number
Details:
  TestName: setCWithLargeNumber
  Description: This test is meant to check the setC method when a large number is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with a large number.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is a large number. The expected result is based on the formula provided in the getAverage method. This test is significant as it checks the setC method's ability to handle large numbers.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;

public class StudentGradeSetCTest {

	@Test
	@Tag("valid")
	public void setCWithPositiveNumber() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(3.0);
		studentGrade.setB(4.0);
		studentGrade.setC(5.0);
		double expectedAverage = (3.0 * 2.0 + 4.0 * 3.0 + 5.0 * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage(),
				"The average is not correctly calculated when c is a positive number.");
	}

	@Test
	@Tag("valid")
	public void setCWithNegativeNumber() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(3.0);
		studentGrade.setB(4.0);
		studentGrade.setC(-5.0);
		double expectedAverage = (3.0 * 2.0 + 4.0 * 3.0 + -5.0 * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage(),
				"The average is not correctly calculated when c is a negative number.");
	}

	@Test
	@Tag("boundary")
	public void setCWithZero() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(3.0);
		studentGrade.setB(4.0);
		studentGrade.setC(0.0);
		double expectedAverage = (3.0 * 2.0 + 4.0 * 3.0 + 0.0 * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage(),
				"The average is not correctly calculated when c is zero.");
	}

	@Test
	@Tag("boundary")
	public void setCWithLargeNumber() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(3.0);
		studentGrade.setB(4.0);
		studentGrade.setC(1000000.0);
		double expectedAverage = (3.0 * 2.0 + 4.0 * 3.0 + 1000000.0 * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage(),
				"The average is not correctly calculated when c is a large number.");
	}

}