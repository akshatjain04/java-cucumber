/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example 
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b

"""
Scenario 1: Test to get the product of two positive integers 

Details:  
  TestName: testGetProductWithPositiveIntegers
  Description: This test is designed to check the functionality of the getProduct method when both input integers are positive. 
Execution:
  Arrange: Initialize Calculator class, set values of a and b to positive integers using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Compare the actual result of the getProduct method with the expected result (a*b).
Validation: 
  The assertion aims to verify that the getProduct method correctly calculates the product of two positive integers. 
  This test is significant in ensuring the correctness of basic multiplication operation in the application.

Scenario 2: Test to get the product of two negative integers 

Details:  
  TestName: testGetProductWithNegativeIntegers
  Description: This test is designed to check the functionality of the getProduct method when both input integers are negative. 
Execution:
  Arrange: Initialize Calculator class, set values of a and b to negative integers using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Compare the actual result of the getProduct method with the expected result (a*b).
Validation: 
  The assertion aims to verify that the getProduct method correctly calculates the product of two negative integers. 
  This test is significant in ensuring the correctness of basic multiplication operation in the application.

Scenario 3: Test to get the product of a positive and a negative integer 

Details:  
  TestName: testGetProductWithPositiveAndNegativeIntegers
  Description: This test is designed to check the functionality of the getProduct method when one input integer is positive and the other is negative. 
Execution:
  Arrange: Initialize Calculator class, set values of a and b such that one is positive and the other is negative using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Compare the actual result of the getProduct method with the expected result (a*b).
Validation: 
  The assertion aims to verify that the getProduct method correctly calculates the product of a positive and a negative integer. 
  This test is significant in ensuring the correctness of basic multiplication operation in the application.

Scenario 4: Test to get the product when one of the integers is zero 

Details:  
  TestName: testGetProductWithZero
  Description: This test is designed to check the functionality of the getProduct method when one of the input integers is zero. 
Execution:
  Arrange: Initialize Calculator class, set value of a to zero and b to any integer using setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Compare the actual result of the getProduct method with the expected result (a*b).
Validation: 
  The assertion aims to verify that the getProduct method correctly returns zero when one of the integers is zero. 
  This test is significant in ensuring the correctness of basic multiplication operation in the application.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class CalculatorGetProductTest {
    private Calculator calculator;
    @BeforeEach
    public void setUp() {
        calculator = new Calculator();
    }
    @Test
    @Tag("valid")
    public void testGetProductWithPositiveIntegers() {
        calculator.setA(5);
        calculator.setB(10);
        int actual = calculator.getProduct();
        int expected = 50;
        assertEquals(expected, actual);
    }
    @Test
    @Tag("valid")
    public void testGetProductWithNegativeIntegers() {
        calculator.setA(-5);
        calculator.setB(-10);
        int actual = calculator.getProduct();
        int expected = 50;
        assertEquals(expected, actual);
    }
    @Test
    @Tag("valid")
    public void testGetProductWithPositiveAndNegativeIntegers() {
        calculator.setA(-5);
        calculator.setB(10);
        int actual = calculator.getProduct();
        int expected = -50;
        assertEquals(expected, actual);
    }
    @Test
    @Tag("boundary")
    public void testGetProductWithZero() {
        calculator.setA(0);
        calculator.setB(10);
        int actual = calculator.getProduct();
        int expected = 0;
        assertEquals(expected, actual);
    }
}