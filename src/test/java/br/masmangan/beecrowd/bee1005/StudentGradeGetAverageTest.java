

// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

Scenario 1: Test for Normal Values

Details:  
  TestName: testAverageWithNormalValues.
  Description: This test is to validate the functionality of the getAverage method when both a and b are set to normal values. 
Execution:
  Arrange: Create an instance of StudentGrade. Set a and b to normal values (for example, a=2.0 and b=3.0).
  Act: Invoke the getAverage method.
  Assert: Assert that the returned average is as expected (for example, ((2.0 * 3.5 + 3.0 * 7.5) / 11.0)).
Validation: 
  Verify that the method correctly calculates the average based on the weights given to a and b. This confirms that the getAverage method works correctly under normal conditions.

Scenario 2: Test with Zero Values

Details:  
  TestName: testAverageWithZeroValues.
  Description: This test is to validate the functionality of the getAverage method when both a and b are set to zero.
Execution:
  Arrange: Create an instance of StudentGrade. Set a and b to zero.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned average is zero.
Validation: 
  Verify that the method correctly returns zero when both a and b are zero. This confirms that the getAverage method works correctly when a and b are zero.

Scenario 3: Test with Negative Values

Details:  
  TestName: testAverageWithNegativeValues.
  Description: This test is to validate the functionality of the getAverage method when both a and b are set to negative values.
Execution:
  Arrange: Create an instance of StudentGrade. Set a and b to negative values (for example, a=-2.0 and b=-3.0).
  Act: Invoke the getAverage method.
  Assert: Assert that the returned average is negative (for example, ((-2.0 * 3.5 + -3.0 * 7.5) / 11.0)).
Validation: 
  Verify that the method correctly calculates the average when both a and b are negative. This confirms that the getAverage method works correctly when a and b are negative.

Scenario 4: Test with Maximum Values

Details:  
  TestName: testAverageWithMaximumValues.
  Description: This test is to validate the functionality of the getAverage method when both a and b are set to their maximum possible values.
Execution:
  Arrange: Create an instance of StudentGrade. Set a and b to their maximum possible values (for example, a=Double.MAX_VALUE and b=Double.MAX_VALUE).
  Act: Invoke the getAverage method.
  Assert: Assert that the returned average is as expected (for example, ((Double.MAX_VALUE * 3.5 + Double.MAX_VALUE * 7.5) / 11.0)).
Validation: 
  Verify that the method correctly calculates the average when both a and b are set to their maximum possible values. This confirms that the getAverage method works correctly under extreme conditions.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {
    @Test
    @Tag("valid")
    public void testAverageWithNormalValues() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(2.0);
        studentGrade.setB(3.0);
        
        double expectedAverage = (2.0 * 3.5 + 3.0 * 7.5) / 11.0;
        double actualAverage = studentGrade.getAverage();
        
        assertEquals(expectedAverage, actualAverage);
    }
    @Test
    @Tag("boundary")
    public void testAverageWithZeroValues() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(0.0);
        studentGrade.setB(0.0);
        
        double expectedAverage = 0.0;
        double actualAverage = studentGrade.getAverage();
        
        assertEquals(expectedAverage, actualAverage);
    }
    @Test
    @Tag("invalid")
    public void testAverageWithNegativeValues() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(-2.0);
        studentGrade.setB(-3.0);
        
        double expectedAverage = (-2.0 * 3.5 + -3.0 * 7.5) / 11.0;
        double actualAverage = studentGrade.getAverage();
        
        assertEquals(expectedAverage, actualAverage);
    }
    @Test
    @Tag("boundary")
    public void testAverageWithMaximumValues() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(Double.MAX_VALUE);
        studentGrade.setB(Double.MAX_VALUE);
        
        double expectedAverage = (Double.MAX_VALUE * 3.5 + Double.MAX_VALUE * 7.5) / 11.0;
        double actualAverage = studentGrade.getAverage();
        
        assertEquals(expectedAverage, actualAverage);
    }
}