// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
Scenario 1: Test for Normal Values

Details:
  TestName: testAverageWithNormalValues.
  Description: This test is to validate the getAverage method when a and b are set to normal, non-zero values.
Execution:
  Arrange: Set a and b to known values, for example, a = 2.0 and b = 3.0.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is as expected, which should be (2.0 * 3.5 + 3.0 * 7.5) / 11.0.
Validation:
  This assertion verifies that the getAverage method correctly calculates the average based on the formula provided. This is important as it ensures the basic functionality of the getAverage method.

Scenario 2: Test for Zero Values

Details:
  TestName: testAverageWithZeroValues.
  Description: This test is to validate the getAverage method when a and b are set to zero.
Execution:
  Arrange: Set a and b to zero.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is zero.
Validation:
  This assertion verifies that the getAverage method correctly handles the edge case where a and b are both zero. This is important as it ensures that the method can handle edge cases and return the expected results.

Scenario 3: Test for Negative Values

Details:
  TestName: testAverageWithNegativeValues.
  Description: This test is to validate the getAverage method when a and b are set to negative values.
Execution:
  Arrange: Set a and b to negative values, for example, a = -2.0 and b = -3.0.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is as expected, which should be (-2.0 * 3.5 + -3.0 * 7.5) / 11.0.
Validation:
  This assertion verifies that the getAverage method correctly calculates the average even when a and b are negative. This is important as it ensures that the method can handle a variety of input values.

Scenario 4: Test for Large Values

Details:
  TestName: testAverageWithLargeValues.
  Description: This test is to validate the getAverage method when a and b are set to large values.
Execution:
  Arrange: Set a and b to large values, for example, a = 1e6 and b = 1e6.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is as expected, which should be (1e6 * 3.5 + 1e6 * 7.5) / 11.0.
Validation:
  This assertion verifies that the getAverage method can handle large input values and still return the correct result. This is important as it ensures the method's robustness in handling large inputs.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {

	@Test
	@Tag("valid")
	public void testAverageWithNormalValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		double expectedAverage = (2.0 * 3.5 + 3.0 * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

	@Test
	@Tag("boundary")
	public void testAverageWithZeroValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		double expectedAverage = 0.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

	@Test
	@Tag("valid")
	public void testAverageWithNegativeValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2.0);
		studentGrade.setB(-3.0);
		double expectedAverage = (-2.0 * 3.5 + -3.0 * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

	@Test
	@Tag("boundary")
	public void testAverageWithLargeValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(1e6);
		studentGrade.setB(1e6);
		double expectedAverage = (1e6 * 3.5 + 1e6 * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

}