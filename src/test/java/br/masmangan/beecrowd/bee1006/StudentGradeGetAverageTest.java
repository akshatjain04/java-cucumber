

// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
Scenario 1: Normal case where all grades are positive numbers

Details:  
TestName: testGetAverageWithPositiveNumbers
Description: This test checks the getAverage method when all the grades (a, b, c) are positive numbers. 
Execution:
Arrange: Set a, b and c with positive numbers using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average.
Validation: 
This assertion verifies the correctness of the average calculation when all grades are positive numbers. It's significant as it validates the basic functionality of the getAverage method.

Scenario 2: Case where all grades are zero

Details:  
TestName: testGetAverageWithZeroGrades
Description: This test checks the getAverage method when all the grades (a, b, c) are zero. 
Execution:
Arrange: Set a, b and c with zero using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average which is also zero.
Validation: 
This assertion verifies if the getAverage method can handle the edge case where all grades are zero. This is important because it checks if the method can handle edge cases correctly.

Scenario 3: Case where some grades are negative

Details:  
TestName: testGetAverageWithNegativeGrades
Description: This test checks the getAverage method when some of the grades (a, b, c) are negative numbers. 
Execution:
Arrange: Set a, b and c with some negative numbers using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average.
Validation: 
This assertion verifies if the getAverage method can handle the case where some grades are negative numbers. This is important as it checks if the method can handle different types of input data.

Scenario 4: Case where all grades are negative

Details:  
TestName: testGetAverageWithAllNegativeGrades
Description: This test checks the getAverage method when all the grades (a, b, c) are negative numbers. 
Execution:
Arrange: Set a, b and c with negative numbers using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average.
Validation: 
This assertion verifies if the getAverage method can handle the edge case where all grades are negative numbers. This is important as it checks if the method can handle edge cases correctly.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {
    @Test
    @Tag("valid")
    public void testGetAverageWithPositiveNumbers() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(2.0);
        studentGrade.setB(3.0);
        studentGrade.setC(5.0);
        double expectedAverage = 3.7;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testGetAverageWithZeroGrades() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(0.0);
        studentGrade.setB(0.0);
        studentGrade.setC(0.0);
        double expectedAverage = 0.0;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("invalid")
    public void testGetAverageWithNegativeGrades() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(-2.0);
        studentGrade.setB(3.0);
        studentGrade.setC(5.0);
        double expectedAverage = 2.3;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testGetAverageWithAllNegativeGrades() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(-2.0);
        studentGrade.setB(-3.0);
        studentGrade.setC(-5.0);
        double expectedAverage = -3.7;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
}