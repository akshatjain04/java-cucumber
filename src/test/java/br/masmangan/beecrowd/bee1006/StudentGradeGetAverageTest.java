

// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
Scenario 1: Normal case where all grades are positive numbers

Details:  
TestName: testGetAverageWithPositiveNumbers
Description: This test checks the getAverage method when all the grades (a, b, c) are positive numbers. 
Execution:
Arrange: Set a, b and c with positive numbers using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average.
Validation: 
This assertion verifies the correctness of the average calculation when all grades are positive numbers. It ensures the correct weightage is given to each grade in the average calculation.

Scenario 2: Edge case where all grades are zero

Details:  
TestName: testGetAverageWithZeroGrades
Description: This test checks the getAverage method when all the grades (a, b, c) are zero. 
Execution:
Arrange: Set a, b and c with zero using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average (which should be zero).
Validation: 
This assertion verifies the correctness of the average calculation when all grades are zero. It checks if the method can handle zero values correctly.

Scenario 3: Edge case where grades are negative numbers

Details:  
TestName: testGetAverageWithNegativeNumbers
Description: This test checks the getAverage method when all the grades (a, b, c) are negative numbers. 
Execution:
Arrange: Set a, b and c with negative numbers using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average.
Validation: 
This assertion verifies the correctness of the average calculation when all grades are negative numbers. It ensures the method can handle negative values correctly.

Scenario 4: Normal case where grades are a mix of positive and negative numbers

Details:  
TestName: testGetAverageWithMixedNumbers
Description: This test checks the getAverage method when the grades (a, b, c) are a mix of positive and negative numbers. 
Execution:
Arrange: Set a, b and c with a mix of positive and negative numbers using the methods setA(), setB() and setC().
Act: Invoke the getAverage method.
Assert: Use JUnit assertions to compare the actual result against the expected average.
Validation: 
This assertion verifies the correctness of the average calculation when grades are a mix of positive and negative numbers. It checks if the method can handle such scenarios correctly.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {
    @Test
    @Tag("valid")
    public void testGetAverageWithPositiveNumbers() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(2.0);
        studentGrade.setB(3.0);
        studentGrade.setC(5.0);
        double expectedAverage = 3.9;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testGetAverageWithZeroGrades() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(0.0);
        studentGrade.setB(0.0);
        studentGrade.setC(0.0);
        double expectedAverage = 0.0;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("invalid")
    public void testGetAverageWithNegativeNumbers() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(-2.0);
        studentGrade.setB(-3.0);
        studentGrade.setC(-5.0);
        double expectedAverage = -3.9;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
    @Test
    @Tag("valid")
    public void testGetAverageWithMixedNumbers() {
        StudentGrade studentGrade = new StudentGrade();
        studentGrade.setA(-2.0);
        studentGrade.setB(3.0);
        studentGrade.setC(5.0);
        double expectedAverage = 2.9;
        assertEquals(expectedAverage, studentGrade.getAverage());
    }
}