// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=setA_a669585e3b
ROOST_METHOD_SIG_HASH=setA_4612eff528

"""
Scenario 1: Validate the setA function with positive input
Details:
  TestName: validateSetAWithPositiveInput
  Description: This test is meant to check whether the setA function correctly sets the grade 'a' when provided with a positive input.
Execution:
  Arrange: Create a StudentGrade object and a positive double value.
  Act: Invoke the setA method on the StudentGrade object with the positive double value.
  Assert: Use JUnit assertions to compare the calculated average with the expected average.
Validation:
  The assertion aims to verify that the setA function correctly sets the grade 'a' with the provided positive double value.
  The significance of this test lies in ensuring that the setA function correctly handles positive inputs, as grades are typically positive numbers.

Scenario 2: Validate the setA function with zero input
Details:
  TestName: validateSetAWithZeroInput
  Description: This test is meant to check whether the setA function correctly sets the grade 'a' when provided with zero input.
Execution:
  Arrange: Create a StudentGrade object and a double value of zero.
  Act: Invoke the setA method on the StudentGrade object with the zero double value.
  Assert: Use JUnit assertions to compare the calculated average with the expected average.
Validation:
  The assertion aims to verify that the setA function correctly sets the grade 'a' with zero.
  The significance of this test lies in ensuring that the setA function correctly handles zero inputs, as a grade can be zero.

Scenario 3: Validate the setA function with negative input
Details:
  TestName: validateSetAWithNegativeInput
  Description: This test is meant to check whether the setA function correctly sets the grade 'a' when provided with a negative input.
Execution:
  Arrange: Create a StudentGrade object and a negative double value.
  Act: Invoke the setA method on the StudentGrade object with the negative double value.
  Assert: Use JUnit assertions to compare the calculated average with the expected average.
Validation:
  The assertion aims to verify that the setA function correctly sets the grade 'a' with the provided negative double value.
  The significance of this test lies in ensuring that the setA function correctly handles negative inputs, as grades should not be negative.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeSetATest {

	@Test
	@Tag("valid")
	public void validateSetAWithPositiveInput() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		double positiveInput = 85.0;
		// Act
		studentGrade.setA(positiveInput);
		double expectedAverage = (positiveInput * 2.0) / 10.0;
		// Assert
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("boundary")
	public void validateSetAWithZeroInput() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		double zeroInput = 0.0;
		// Act
		studentGrade.setA(zeroInput);
		double expectedAverage = 0.0;
		// Assert
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("invalid")
	public void validateSetAWithNegativeInput() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		double negativeInput = -10.0;
		// Act
		studentGrade.setA(negativeInput);
		double expectedAverage = (negativeInput * 2.0) / 10.0;
		// Assert
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

}