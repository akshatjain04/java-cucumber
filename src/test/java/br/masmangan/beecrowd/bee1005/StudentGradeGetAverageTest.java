

// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

Scenario 1: Test for Normal Values

Details:  
  TestName: testAverageWithNormalValues.
  Description: This test is to validate the functionality of the getAverage method when normal values are provided for a and b.
Execution:
  Arrange: Set the values of a and b using the setA and setB methods respectively.
  Act: Invoke the getAverage method.
  Assert: Compare the returned value with the expected average.
Validation: 
  Verify that the average is calculated correctly when normal values are provided. This test is significant as it ensures that the method can handle typical use cases.

Scenario 2: Test for Zero Values

Details:  
  TestName: testAverageWithZeroValues.
  Description: This test is to validate the functionality of the getAverage method when zero values are provided for a and b.
Execution:
  Arrange: Set the values of a and b to zero using the setA and setB methods respectively.
  Act: Invoke the getAverage method.
  Assert: Compare the returned value with zero.
Validation: 
  Verify that the average is calculated correctly when zero values are provided. This test is significant as it ensures that the method can handle edge cases.

Scenario 3: Test for Negative Values

Details:  
  TestName: testAverageWithNegativeValues.
  Description: This test is to validate the functionality of the getAverage method when negative values are provided for a and b.
Execution:
  Arrange: Set the values of a and b to negative using the setA and setB methods respectively.
  Act: Invoke the getAverage method.
  Assert: Compare the returned value with the expected negative average.
Validation: 
  Verify that the average is calculated correctly when negative values are provided. This test is significant as it ensures that the method can handle edge cases.

Scenario 4: Test for Maximum Values

Details:  
  TestName: testAverageWithMaxValues.
  Description: This test is to validate the functionality of the getAverage method when maximum values are provided for a and b.
Execution:
  Arrange: Set the values of a and b to maximum using the setA and setB methods respectively.
  Act: Invoke the getAverage method.
  Assert: Compare the returned value with the expected average.
Validation: 
  Verify that the average is calculated correctly when maximum values are provided. This test is significant as it ensures that the method can handle edge cases.

Scenario 5: Test for Minimum Values

Details:  
  TestName: testAverageWithMinValues.
  Description: This test is to validate the functionality of the getAverage method when minimum values are provided for a and b.
Execution:
  Arrange: Set the values of a and b to minimum using the setA and setB methods respectively.
  Act: Invoke the getAverage method.
  Assert: Compare the returned value with the expected average.
Validation: 
  Verify that the average is calculated correctly when minimum values are provided. This test is significant as it ensures that the method can handle edge cases.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {
    @Test
    @Tag("valid")
    public void testAverageWithNormalValues() {
        StudentGrade student = new StudentGrade();
        student.setA(10.0);
        student.setB(20.0);
        double expectedAverage = (10.0 * 3.5 + 20.0 * 7.5) / 11.0;
        assertEquals(expectedAverage, student.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testAverageWithZeroValues() {
        StudentGrade student = new StudentGrade();
        student.setA(0.0);
        student.setB(0.0);
        assertEquals(0.0, student.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testAverageWithNegativeValues() {
        StudentGrade student = new StudentGrade();
        student.setA(-10.0);
        student.setB(-20.0);
        double expectedAverage = (-10.0 * 3.5 - 20.0 * 7.5) / 11.0;
        assertEquals(expectedAverage, student.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testAverageWithMaxValues() {
        StudentGrade student = new StudentGrade();
        student.setA(Double.MAX_VALUE);
        student.setB(Double.MAX_VALUE);
        double expectedAverage = (Double.MAX_VALUE * 3.5 + Double.MAX_VALUE * 7.5) / 11.0;
        assertEquals(expectedAverage, student.getAverage());
    }
    @Test
    @Tag("boundary")
    public void testAverageWithMinValues() {
        StudentGrade student = new StudentGrade();
        student.setA(Double.MIN_VALUE);
        student.setB(Double.MIN_VALUE);
        double expectedAverage = (Double.MIN_VALUE * 3.5 + Double.MIN_VALUE * 7.5) / 11.0;
        assertEquals(expectedAverage, student.getAverage());
    }
}