// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b

Scenario 1: Test getProduct with positive inputs
Details:
  TestName: testProductWithPositiveInputs
  Description: This test is meant to check the product of two positive integers.
Execution:
  Arrange: Create a Calculator object and set 'a' and 'b' to positive integers using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the product matches the expected result.
Validation:
  This test verifies that the getProduct method correctly calculates the product of two positive integers. This is important for the calculator's basic multiplication functionality.

Scenario 2: Test getProduct with zero input
Details:
  TestName: testProductWithZeroInput
  Description: This test is meant to check the product when one of the inputs is zero.
Execution:
  Arrange: Create a Calculator object and set 'a' to any integer and 'b' to zero using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the product is zero.
Validation:
  This test verifies that the getProduct method correctly returns zero when one of the inputs is zero. This is important as multiplication with zero should always return zero.

Scenario 3: Test getProduct with negative inputs
Details:
  TestName: testProductWithNegativeInputs
  Description: This test is meant to check the product of two negative integers.
Execution:
  Arrange: Create a Calculator object and set 'a' and 'b' to negative integers using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the product is a positive integer.
Validation:
  This test verifies that the getProduct method correctly calculates the product of two negative integers. The product of two negative numbers should be positive. This is important for the calculator's basic multiplication functionality.

Scenario 4: Test getProduct with one negative and one positive input
Details:
  TestName: testProductWithMixedInputs
  Description: This test is meant to check the product of a negative integer and a positive integer.
Execution:
  Arrange: Create a Calculator object and set 'a' to a negative integer and 'b' to a positive integer using the setA and setB methods.
  Act: Invoke the getProduct method on the Calculator object.
  Assert: Assert that the product is a negative integer.
Validation:
  This test verifies that the getProduct method correctly calculates the product of a negative and a positive integer. The product of a negative and a positive number should be negative. This is important for the calculator's basic multiplication functionality.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class CalculatorGetProductTest {

	@Test
	@Tag("valid")
	public void testProductWithPositiveInputs() {
		Calculator calculator = new Calculator();
		calculator.setA(5);
		calculator.setB(4);
		int actualProduct = calculator.getProduct();
		int expectedProduct = 20;
		assertEquals(expectedProduct, actualProduct);
	}

	@Test
	@Tag("boundary")
	public void testProductWithZeroInput() {
		Calculator calculator = new Calculator();
		calculator.setA(7);
		calculator.setB(0);
		int actualProduct = calculator.getProduct();
		int expectedProduct = 0;
		assertEquals(expectedProduct, actualProduct);
	}

	@Test
	@Tag("valid")
	public void testProductWithNegativeInputs() {
		Calculator calculator = new Calculator();
		calculator.setA(-3);
		calculator.setB(-2);
		int actualProduct = calculator.getProduct();
		int expectedProduct = 6;
		assertEquals(expectedProduct, actualProduct);
	}

	@Test
	@Tag("valid")
	public void testProductWithMixedInputs() {
		Calculator calculator = new Calculator();
		calculator.setA(-5);
		calculator.setB(4);
		int actualProduct = calculator.getProduct();
		int expectedProduct = -20;
		assertEquals(expectedProduct, actualProduct);
	}

}