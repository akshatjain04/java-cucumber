/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example 
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=sayHello_52ad62746f
ROOST_METHOD_SIG_HASH=sayHello_26998730d5

"""
  Scenario 1: Test to check if sayHello returns the correct string

  Details:  
    TestName: testSayHelloReturnCorrectString
    Description: This test is meant to verify if the method sayHello returns the correct string "Hello World!". 
  Execution:
    Arrange: There is no need to set up any data or mocks as the sayHello method does not require any parameters.
    Act: Invoke the sayHello method.
    Assert: Use JUnit assertions to compare the actual result against the expected string "Hello World!".
  Validation: 
    The assertion aims to verify that the sayHello method is functioning correctly and returning the expected string. If the method does not return "Hello World!", it indicates that there is a bug in the method implementation. This test is significant as it verifies the basic functionality of the sayHello method.

  Scenario 2: Test to check if sayHello does not return null

  Details:  
    TestName: testSayHelloDoesNotReturnNull
    Description: This test is meant to verify if the method sayHello does not return null. 
  Execution:
    Arrange: There is no need to set up any data or mocks as the sayHello method does not require any parameters.
    Act: Invoke the sayHello method.
    Assert: Use JUnit assertions to check that the result is not null.
  Validation: 
    The assertion aims to verify that the sayHello method is not returning null. Returning null could lead to NullPointer Exceptions in other parts of the application that use this method. This test is significant as it ensures the robustness of the sayHello method.
  
  Scenario 3: Test to check if sayHello returns a string of correct length

  Details:  
    TestName: testSayHelloReturnStringLength
    Description: This test is meant to verify if the method sayHello returns a string of correct length, which is 12 characters long including the exclamation mark.
  Execution:
    Arrange: There is no need to set up any data or mocks as the sayHello method does not require any parameters.
    Act: Invoke the sayHello method.
    Assert: Use JUnit assertions to compare the actual length of the returned string against the expected length of 12.
  Validation: 
    The assertion aims to verify that the sayHello method is returning a string of correct length. If the length is not 12, it indicates that the string returned by the method is not "Hello World!". This test is significant as it provides an additional check on the correct functionality of the sayHello method.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1000;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;

public class GreeterSayHelloTest {
    @Test
    @Tag("valid")
    public void testSayHelloReturnCorrectString() {
        Greeter greeter = new Greeter();
        String actual = greeter.sayHello();
        String expected = "Hello World!";
        assertEquals(expected, actual, "Expected string does not match actual string returned by sayHello method");
    }
    @Test
    @Tag("valid")
    public void testSayHelloDoesNotReturnNull() {
        Greeter greeter = new Greeter();
        String actual = greeter.sayHello();
        assertNotNull(actual, "sayHello method returned null");
    }
    @Test
    @Tag("valid")
    public void testSayHelloReturnStringLength() {
        Greeter greeter = new Greeter();
        String actual = greeter.sayHello();
        int expectedLength = 12;
        assertEquals(expectedLength, actual.length(), "Expected string length does not match actual string length returned by sayHello method");
    }
}