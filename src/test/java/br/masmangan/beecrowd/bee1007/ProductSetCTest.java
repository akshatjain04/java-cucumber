// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=setC_6a38a78765
ROOST_METHOD_SIG_HASH=setC_200a7984fe

"""
Scenario 1: Test when the setC method is called with a positive integer
Details:
  TestName: setCWithPositiveValue
  Description: This test is meant to check if the setC method correctly sets the value of c when a positive integer is provided.
Execution:
  Arrange: Create an instance of the Product entity.
  Act: Call the setC method with a positive integer.
  Assert: Call the getDifference method and assert that the result is as expected.
Validation:
  The assertion verifies that the setC method correctly sets the value of c. The expected result is based on the calculation (a * b) - (c * d). This test is significant as it ensures that the setC method works correctly with positive integers.

Scenario 2: Test when the setC method is called with a negative integer
Details:
  TestName: setCWithNegativeValue
  Description: This test is meant to check if the setC method correctly sets the value of c when a negative integer is provided.
Execution:
  Arrange: Create an instance of the Product entity.
  Act: Call the setC method with a negative integer.
  Assert: Call the getDifference method and assert that the result is as expected.
Validation:
  The assertion verifies that the setC method correctly sets the value of c. The expected result is based on the calculation (a * b) - (c * d). This test is significant as it ensures that the setC method works correctly with negative integers.

Scenario 3: Test when the setC method is called with zero
Details:
  TestName: setCWithZero
  Description: This test is meant to check if the setC method correctly sets the value of c when zero is provided.
Execution:
  Arrange: Create an instance of the Product entity.
  Act: Call the setC method with zero.
  Assert: Call the getDifference method and assert that the result is as expected.
Validation:
  The assertion verifies that the setC method correctly sets the value of c. The expected result is based on the calculation (a * b) - (c * d). This test is significant as it ensures that the setC method works correctly with zero.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1007;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class ProductSetCTest {

	@Test
	@Tag("valid")
	public void setCWithPositiveValue() {
		Product product = new Product();
		product.setA(2);
		product.setB(3);
		product.setC(1);
		product.setD(2);
		assertEquals(4, product.getDifference());
	}

	@Test
	@Tag("valid")
	public void setCWithNegativeValue() {
		Product product = new Product();
		product.setA(2);
		product.setB(3);
		product.setC(-1);
		product.setD(2);
		assertEquals(8, product.getDifference());
	}

	@Test
	@Tag("boundary")
	public void setCWithZero() {
		Product product = new Product();
		product.setA(2);
		product.setB(3);
		product.setC(0);
		product.setD(2);
		assertEquals(6, product.getDifference());
	}

}