// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=setC_6b626570ad
ROOST_METHOD_SIG_HASH=setC_f40d5436c1

"""
Scenario 1: Testing the setC method with a positive value
Details:
  TestName: setCWithPositiveValue
  Description: This test is meant to check the setC method when a positive value is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with a positive value.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is a positive value. The expected result is based on the formula provided in the getAverage method. This test validates the correct functionality of the setC method and its impact on the getAverage method.

Scenario 2: Testing the setC method with a negative value
Details:
  TestName: setCWithNegativeValue
  Description: This test is meant to check the setC method when a negative value is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with a negative value.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is a negative value. The expected result is based on the formula provided in the getAverage method. This test validates the correct functionality of the setC method and its impact on the getAverage method.

Scenario 3: Testing the setC method with zero
Details:
  TestName: setCWithZero
  Description: This test is meant to check the setC method when zero is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with zero.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is zero. The expected result is based on the formula provided in the getAverage method. This test validates the correct functionality of the setC method and its impact on the getAverage method.

Scenario 4: Testing the setC method with a very large value
Details:
  TestName: setCWithLargeValue
  Description: This test is meant to check the setC method when a very large value is passed as a parameter.
  Execution:
    Arrange: Create a StudentGrade object and set a and b values.
    Act: Invoke the setC method with a very large value.
    Assert: Use JUnit assertions to compare actual average against expected average.
  Validation:
    The assertion aims to verify that the average is correctly calculated when c is a very large value. The expected result is based on the formula provided in the getAverage method. This test validates the correct functionality of the setC method and its impact on the getAverage method.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeSetCTest {

	@Test
	@Tag("valid")
	public void setCWithPositiveValue() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(5.0);
		double expectedAverage = (2.0 * 2.0 + 3.0 * 3.0 + 5.0 * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("invalid")
	public void setCWithNegativeValue() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(-5.0);
		double expectedAverage = (2.0 * 2.0 + 3.0 * 3.0 - 5.0 * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("boundary")
	public void setCWithZero() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(0.0);
		double expectedAverage = (2.0 * 2.0 + 3.0 * 3.0 + 0.0 * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

	@Test
	@Tag("boundary")
	public void setCWithLargeValue() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(Double.MAX_VALUE);
		double expectedAverage = (2.0 * 2.0 + 3.0 * 3.0 + Double.MAX_VALUE * 5.0) / 10.0;
		assertEquals(expectedAverage, studentGrade.getAverage());
	}

}