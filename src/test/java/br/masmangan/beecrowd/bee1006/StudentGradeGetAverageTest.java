// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
  Scenario 1: Normal case where all grades are positive numbers

  Details:
    TestName: testAverageWithPositiveNumbers
    Description: This test checks the average calculation when all grades (a, b, c) are positive numbers.
  Execution:
    Arrange: Set grades a, b, c to be positive numbers.
    Act: Invoke the getAverage() method.
    Assert: Check if the returned average is correct.
  Validation:
    The assertion aims to verify that the method correctly calculates the average grade when all grades are positive. The expected result is based on the weighted average formula. This test is significant as it verifies the basic functionality of the getAverage() method.

  Scenario 2: Edge case where all grades are zero

  Details:
    TestName: testAverageWithZeroGrades
    Description: This test checks the average calculation when all grades (a, b, c) are zero.
  Execution:
    Arrange: Set grades a, b, c to be zero.
    Act: Invoke the getAverage() method.
    Assert: Check if the returned average is zero.
  Validation:
    The assertion verifies that the method correctly calculates the average grade when all grades are zero. The expected result is zero since the average of zero grades is zero. This test is significant as it tests the edge case where all grades are zero.

  Scenario 3: Normal case where all grades are negative numbers

  Details:
    TestName: testAverageWithNegativeNumbers
    Description: This test checks the average calculation when all grades (a, b, c) are negative numbers.
  Execution:
    Arrange: Set grades a, b, c to be negative numbers.
    Act: Invoke the getAverage() method.
    Assert: Check if the returned average is a negative number.
  Validation:
    The assertion aims to verify that the method correctly calculates the average grade when all grades are negative. The expected result is a negative number based on the weighted average formula. This test is significant as it checks the method's handling of negative grades.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {

	@Test
	@Tag("valid")
	public void testAverageWithPositiveNumbers() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(5.0);
		// Act
		double average = studentGrade.getAverage();
		// Assert
		assertEquals(3.7, average, "Average calculation for positive numbers is incorrect.");
	}

	@Test
	@Tag("boundary")
	public void testAverageWithZeroGrades() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(0.0);
		// Act
		double average = studentGrade.getAverage();
		// Assert
		assertEquals(0.0, average, "Average calculation for zero grades is incorrect.");
	}

	@Test
	@Tag("valid")
	public void testAverageWithNegativeNumbers() {
		// Arrange
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2.0);
		studentGrade.setB(-3.0);
		studentGrade.setC(-5.0);
		// Act
		double average = studentGrade.getAverage();
		// Assert
		assertEquals(-3.7, average, "Average calculation for negative numbers is incorrect.");
	}

}