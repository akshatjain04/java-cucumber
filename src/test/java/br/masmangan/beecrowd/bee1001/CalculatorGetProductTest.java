/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example 
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test new-test-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b

"""
Scenario 1: Test to get the product of two positive integers 

Details:  
  TestName: testGetProductWithPositiveIntegers
  Description: This test is meant to check the functionality of the getProduct method when both input integers are positive. 
Execution:
  Arrange: Create a Calculator object and set the values of a and b to positive integers using the setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to compare the actual result against the expected product of the two positive integers.
Validation: 
  The assertion aims to verify that the getProduct method accurately multiplies two positive integers. The expected result is the actual product of the two input integers. This test is significant as it checks the basic functionality of the getProduct method.

Scenario 2: Test to get the product of two negative integers 

Details:  
  TestName: testGetProductWithNegativeIntegers
  Description: This test is meant to check the functionality of the getProduct method when both input integers are negative. 
Execution:
  Arrange: Create a Calculator object and set the values of a and b to negative integers using the setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to compare the actual result against the expected product of the two negative integers.
Validation: 
  The assertion aims to verify that the getProduct method accurately multiplies two negative integers. The expected result is the actual product of the two input integers. This test is significant as it checks the functionality of the getProduct method with negative integers.

Scenario 3: Test to get the product of a positive and a negative integer

Details:  
  TestName: testGetProductWithPositiveAndNegativeIntegers
  Description: This test is meant to check the functionality of the getProduct method when one input integer is positive and the other is negative. 
Execution:
  Arrange: Create a Calculator object and set the values of a and b to one positive and one negative integer using the setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to compare the actual result against the expected product of the positive and negative integers.
Validation: 
  The assertion aims to verify that the getProduct method accurately multiplies a positive and a negative integer. The expected result is the actual product of the two input integers. This test is significant as it checks the functionality of the getProduct method with mixed sign integers.

Scenario 4: Test to get the product of an integer and zero

Details:  
  TestName: testGetProductWithZero
  Description: This test is meant to check the functionality of the getProduct method when one of the input integers is zero. 
Execution:
  Arrange: Create a Calculator object and set the values of a and b to any integer and zero using the setA and setB methods.
  Act: Invoke the getProduct method.
  Assert: Use JUnit assertions to compare the actual result against the expected product of the integer and zero.
Validation: 
  The assertion aims to verify that the getProduct method returns zero when one of the input integers is zero. The expected result is zero. This test is significant as it checks the functionality of the getProduct method with zero as an input.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class CalculatorGetProductTest {
    @Test
    @Tag("valid")
    public void testGetProductWithPositiveIntegers() {
        Calculator calculator = new Calculator();
        calculator.setA(5);
        calculator.setB(6);
        int actual = calculator.getProduct();
        int expected = 30;
        assertEquals(expected, actual);
    }
    @Test
    @Tag("valid")
    public void testGetProductWithNegativeIntegers() {
        Calculator calculator = new Calculator();
        calculator.setA(-4);
        calculator.setB(-3);
        int actual = calculator.getProduct();
        int expected = 12;
        assertEquals(expected, actual);
    }
    @Test
    @Tag("valid")
    public void testGetProductWithPositiveAndNegativeIntegers() {
        Calculator calculator = new Calculator();
        calculator.setA(7);
        calculator.setB(-2);
        int actual = calculator.getProduct();
        int expected = -14;
        assertEquals(expected, actual);
    }
    @Test
    @Tag("valid")
    public void testGetProductWithZero() {
        Calculator calculator = new Calculator();
        calculator.setA(0);
        calculator.setB(5);
        int actual = calculator.getProduct();
        int expected = 0;
        assertEquals(expected, actual);
    }
}