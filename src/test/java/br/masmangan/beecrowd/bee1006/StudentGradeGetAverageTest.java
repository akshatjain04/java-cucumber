// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1 using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
  Scenario 1: Normal case where all grades are positive numbers

  Details:
    TestName: testAverageWithPositiveNumbers
    Description: This test checks the average calculation of the 'getAverage' method with positive numbers.
  Execution:
    Arrange: Set 'a', 'b', and 'c' to any positive values.
    Act: Invoke the 'getAverage' method.
    Assert: Check if the returned value is as expected.
  Validation:
    The assertion verifies that the average calculation is correct. The test is significant as it checks the basic functionality of the 'getAverage' method.

  Scenario 2: Edge case where all grades are zero

  Details:
    TestName: testAverageWithZeroValues
    Description: This test checks the average calculation of the 'getAverage' method when all grade values are zero.
  Execution:
    Arrange: Set 'a', 'b', and 'c' to 0.
    Act: Invoke the 'getAverage' method.
    Assert: Check if the returned value is 0.
  Validation:
    The assertion verifies that the average calculation is correct when all grades are zero. This test checks the method's behavior in edge cases.

  Scenario 3: Case where grades are negative numbers

  Details:
    TestName: testAverageWithNegativeNumbers
    Description: This test checks the average calculation of the 'getAverage' method with negative numbers.
  Execution:
    Arrange: Set 'a', 'b', and 'c' to any negative values.
    Act: Invoke the 'getAverage' method.
    Assert: Check if the returned value is as expected.
  Validation:
    The assertion verifies that the average calculation is correct with negative values. This test checks the method's ability to handle negative inputs.

  Scenario 4: Case where grades are mix of positive, negative and zero

  Details:
    TestName: testAverageWithMixedNumbers
    Description: This test checks the average calculation of the 'getAverage' method with mixed numbers.
  Execution:
    Arrange: Set 'a' to a positive number, 'b' to 0, and 'c' to a negative number.
    Act: Invoke the 'getAverage' method.
    Assert: Check if the returned value is as expected.
  Validation:
    The assertion verifies that the average calculation is correct with mixed values. This test checks the method's ability to handle mixed inputs.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class StudentGradeGetAverageTest {

	@Test
	@Tag("valid")
	public void testAverageWithPositiveNumbers() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(5.0);
		double expected = 3.7;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, "The average calculation should be correct with positive numbers");
	}

	@Test
	@Tag("boundary")
	public void testAverageWithZeroValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(0.0);
		double expected = 0.0;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, "The average calculation should be correct when all grades are zero");
	}

	@Test
	@Tag("invalid")
	public void testAverageWithNegativeNumbers() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2.0);
		studentGrade.setB(-3.0);
		studentGrade.setC(-5.0);
		double expected = -3.7;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, "The average calculation should be correct with negative numbers");
	}

	@Test
	@Tag("integration")
	public void testAverageWithMixedNumbers() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(0.0);
		studentGrade.setC(-5.0);
		double expected = -1.6;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, "The average calculation should be correct with mixed numbers");
	}

}