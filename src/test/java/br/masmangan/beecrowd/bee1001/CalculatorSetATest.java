// ********RoostGPT********
/*
Test generated by RoostGPT for test akshat-shared-test-1_clone using AI Type  and AI Model

ROOST_METHOD_HASH=setA_27c2fcf716
ROOST_METHOD_SIG_HASH=setA_c7f6a021ca

"""
Scenario 1: Validate setA method with positive integer
Details:
  TestName: validateSetWithPositiveInteger
  Description: This test is meant to check the setA method when a positive integer is provided as input.
Execution:
  Arrange: Create a Calculator instance, and set b = 10.
  Act: Invoke setA method with a positive integer, e.g., 5.
  Assert: Use JUnit assertions to verify that getSum returns 15 and getProduct returns 50.
Validation:
  The assertion aims to verify that the setA method successfully sets the value of a. The expected result is based on the known values of a and b, and the test is significant in ensuring that the Calculator class correctly performs addition and multiplication.

Scenario 2: Validate setA method with negative integer
Details:
  TestName: validateSetWithNegativeInteger
  Description: This test is meant to check the setA method when a negative integer is provided as input.
Execution:
  Arrange: Create a Calculator instance, and set b = 10.
  Act: Invoke setA method with a negative integer, e.g., -5.
  Assert: Use JUnit assertions to verify that getSum returns 5 and getProduct returns -50.
Validation:
  The assertion aims to verify that the setA method successfully sets the value of a even when it's negative. The expected result is based on the known values of a and b, and the test is significant in ensuring that the Calculator class correctly performs addition and multiplication with negative numbers.

Scenario 3: Validate setA method with zero
Details:
  TestName: validateSetWithZero
  Description: This test is meant to check the setA method when zero is provided as input.
Execution:
  Arrange: Create a Calculator instance, and set b = 10.
  Act: Invoke setA method with 0.
  Assert: Use JUnit assertions to verify that getSum returns 10 and getProduct returns 0.
Validation:
  The assertion aims to verify that the setA method successfully sets the value of a even when it's zero. The expected result is based on the known values of a and b, and the test is significant in ensuring that the Calculator class correctly performs addition and multiplication with zero.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1001;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

public class CalculatorSetATest {

	private Calculator calculator;

	@BeforeEach
	public void setUp() {
		calculator = new Calculator();
		calculator.setB(10);
	}

	@Test
	@Tag("valid")
	public void validateSetWithPositiveInteger() {
		calculator.setA(5);
		assertEquals(15, calculator.getSum());
		assertEquals(50, calculator.getProduct());
	}

	@Test
	@Tag("valid")
	public void validateSetWithNegativeInteger() {
		calculator.setA(-5);
		assertEquals(5, calculator.getSum());
		assertEquals(-50, calculator.getProduct());
	}

	@Test
	@Tag("boundary")
	public void validateSetWithZero() {
		calculator.setA(0);
		assertEquals(10, calculator.getSum());
		assertEquals(0, calculator.getProduct());
	}

}